{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n\nconst genQRCodeStyle = token => {\n  const {\n    componentCls,\n    lineWidth,\n    lineType,\n    colorSplit\n  } = token;\n  return {\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: token.paddingSM,\n      backgroundColor: token.colorWhite,\n      borderRadius: token.borderRadiusLG,\n      border: `${unit(lineWidth)} ${lineType} ${colorSplit}`,\n      position: 'relative',\n      overflow: 'hidden',\n      [`& > ${componentCls}-mask`]: {\n        position: 'absolute',\n        insetBlockStart: 0,\n        insetInlineStart: 0,\n        zIndex: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%',\n        height: '100%',\n        color: token.colorText,\n        lineHeight: token.lineHeight,\n        background: token.QRCodeMaskBackgroundColor,\n        textAlign: 'center',\n        [`& > ${componentCls}-expired`]: {\n          color: token.QRCodeExpiredTextColor\n        }\n      },\n      '> canvas': {\n        alignSelf: 'stretch',\n        flex: 'auto',\n        minWidth: 0\n      },\n      '&-icon': {\n        marginBlockEnd: token.marginXS,\n        fontSize: token.controlHeight\n      }\n    }),\n    [`${componentCls}-borderless`]: {\n      borderColor: 'transparent'\n    }\n  };\n};\n\nexport const prepareComponentToken = () => ({});\nexport default genStyleHooks('QRCode', token => {\n  const mergedToken = mergeToken(token, {\n    QRCodeExpiredTextColor: 'rgba(0, 0, 0, 0.88)',\n    QRCodeMaskBackgroundColor: 'rgba(255, 255, 255, 0.96)'\n  });\n  return genQRCodeStyle(mergedToken);\n}, prepareComponentToken);","map":{"version":3,"sources":["D:/class/cnWeb/QLNH/client_app/node_modules/antd/es/qr-code/style/index.js"],"names":["unit","resetComponent","genStyleHooks","mergeToken","genQRCodeStyle","token","componentCls","lineWidth","lineType","colorSplit","Object","assign","display","justifyContent","alignItems","padding","paddingSM","backgroundColor","colorWhite","borderRadius","borderRadiusLG","border","position","overflow","insetBlockStart","insetInlineStart","zIndex","flexDirection","width","height","color","colorText","lineHeight","background","QRCodeMaskBackgroundColor","textAlign","QRCodeExpiredTextColor","alignSelf","flex","minWidth","marginBlockEnd","marginXS","fontSize","controlHeight","borderColor","prepareComponentToken","mergedToken"],"mappings":"AAAA,SAASA,IAAT,QAAqB,qBAArB;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,sBAA1C;;AACA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA;AAJI,MAKFJ,KALJ;AAMA,SAAO;AACL,KAACC,YAAD,GAAgBI,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,cAAc,CAACI,KAAD,CAAhC,CAAd,EAAwD;AACtEO,MAAAA,OAAO,EAAE,MAD6D;AAEtEC,MAAAA,cAAc,EAAE,QAFsD;AAGtEC,MAAAA,UAAU,EAAE,QAH0D;AAItEC,MAAAA,OAAO,EAAEV,KAAK,CAACW,SAJuD;AAKtEC,MAAAA,eAAe,EAAEZ,KAAK,CAACa,UAL+C;AAMtEC,MAAAA,YAAY,EAAEd,KAAK,CAACe,cANkD;AAOtEC,MAAAA,MAAM,EAAG,GAAErB,IAAI,CAACO,SAAD,CAAY,IAAGC,QAAS,IAAGC,UAAW,EAPiB;AAQtEa,MAAAA,QAAQ,EAAE,UAR4D;AAStEC,MAAAA,QAAQ,EAAE,QAT4D;AAUtE,OAAE,OAAMjB,YAAa,OAArB,GAA8B;AAC5BgB,QAAAA,QAAQ,EAAE,UADkB;AAE5BE,QAAAA,eAAe,EAAE,CAFW;AAG5BC,QAAAA,gBAAgB,EAAE,CAHU;AAI5BC,QAAAA,MAAM,EAAE,EAJoB;AAK5Bd,QAAAA,OAAO,EAAE,MALmB;AAM5Be,QAAAA,aAAa,EAAE,QANa;AAO5Bd,QAAAA,cAAc,EAAE,QAPY;AAQ5BC,QAAAA,UAAU,EAAE,QARgB;AAS5Bc,QAAAA,KAAK,EAAE,MATqB;AAU5BC,QAAAA,MAAM,EAAE,MAVoB;AAW5BC,QAAAA,KAAK,EAAEzB,KAAK,CAAC0B,SAXe;AAY5BC,QAAAA,UAAU,EAAE3B,KAAK,CAAC2B,UAZU;AAa5BC,QAAAA,UAAU,EAAE5B,KAAK,CAAC6B,yBAbU;AAc5BC,QAAAA,SAAS,EAAE,QAdiB;AAe5B,SAAE,OAAM7B,YAAa,UAArB,GAAiC;AAC/BwB,UAAAA,KAAK,EAAEzB,KAAK,CAAC+B;AADkB;AAfL,OAVwC;AA6BtE,kBAAY;AACVC,QAAAA,SAAS,EAAE,SADD;AAEVC,QAAAA,IAAI,EAAE,MAFI;AAGVC,QAAAA,QAAQ,EAAE;AAHA,OA7B0D;AAkCtE,gBAAU;AACRC,QAAAA,cAAc,EAAEnC,KAAK,CAACoC,QADd;AAERC,QAAAA,QAAQ,EAAErC,KAAK,CAACsC;AAFR;AAlC4D,KAAxD,CADX;AAwCL,KAAE,GAAErC,YAAa,aAAjB,GAAgC;AAC9BsC,MAAAA,WAAW,EAAE;AADiB;AAxC3B,GAAP;AA4CD,CAnDD;;AAoDA,OAAO,MAAMC,qBAAqB,GAAG,OAAO,EAAP,CAA9B;AACP,eAAe3C,aAAa,CAAC,QAAD,EAAWG,KAAK,IAAI;AAC9C,QAAMyC,WAAW,GAAG3C,UAAU,CAACE,KAAD,EAAQ;AACpC+B,IAAAA,sBAAsB,EAAE,qBADY;AAEpCF,IAAAA,yBAAyB,EAAE;AAFS,GAAR,CAA9B;AAIA,SAAO9B,cAAc,CAAC0C,WAAD,CAArB;AACD,CAN2B,EAMzBD,qBANyB,CAA5B","sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst genQRCodeStyle = token => {\n  const {\n    componentCls,\n    lineWidth,\n    lineType,\n    colorSplit\n  } = token;\n  return {\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: token.paddingSM,\n      backgroundColor: token.colorWhite,\n      borderRadius: token.borderRadiusLG,\n      border: `${unit(lineWidth)} ${lineType} ${colorSplit}`,\n      position: 'relative',\n      overflow: 'hidden',\n      [`& > ${componentCls}-mask`]: {\n        position: 'absolute',\n        insetBlockStart: 0,\n        insetInlineStart: 0,\n        zIndex: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%',\n        height: '100%',\n        color: token.colorText,\n        lineHeight: token.lineHeight,\n        background: token.QRCodeMaskBackgroundColor,\n        textAlign: 'center',\n        [`& > ${componentCls}-expired`]: {\n          color: token.QRCodeExpiredTextColor\n        }\n      },\n      '> canvas': {\n        alignSelf: 'stretch',\n        flex: 'auto',\n        minWidth: 0\n      },\n      '&-icon': {\n        marginBlockEnd: token.marginXS,\n        fontSize: token.controlHeight\n      }\n    }),\n    [`${componentCls}-borderless`]: {\n      borderColor: 'transparent'\n    }\n  };\n};\nexport const prepareComponentToken = () => ({});\nexport default genStyleHooks('QRCode', token => {\n  const mergedToken = mergeToken(token, {\n    QRCodeExpiredTextColor: 'rgba(0, 0, 0, 0.88)',\n    QRCodeMaskBackgroundColor: 'rgba(255, 255, 255, 0.96)'\n  });\n  return genQRCodeStyle(mergedToken);\n}, prepareComponentToken);"]},"metadata":{},"sourceType":"module"}