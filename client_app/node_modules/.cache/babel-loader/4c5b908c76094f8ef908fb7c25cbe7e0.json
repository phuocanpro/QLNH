{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    containerSize,\n    containerSizeLG,\n    containerSizeSM,\n    textFontSize,\n    textFontSizeLG,\n    textFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType,\n    calc\n  } = token; // Avatar size style\n\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    lineHeight: unit(calc(size).sub(calc(lineWidth).mul(2)).equal()),\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`${componentCls}-string`]: {\n      position: 'absolute',\n      left: {\n        _skip_check_: true,\n        value: '50%'\n      },\n      transformOrigin: '0 center'\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-block',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${unit(lineWidth)} ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(containerSize, textFontSize, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(containerSizeLG, textFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(containerSizeSM, textFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\n\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    groupBorderColor,\n    groupOverlapping,\n    groupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: groupBorderColor\n      },\n      [`> *:not(:first-child)`]: {\n        marginInlineStart: groupOverlapping\n      }\n    },\n    [`${componentCls}-group-popover`]: {\n      [`${componentCls} + ${componentCls}`]: {\n        marginInlineStart: groupSpace\n      }\n    }\n  };\n};\n\nexport const prepareComponentToken = token => {\n  const {\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    marginXXS,\n    colorBorderBg\n  } = token;\n  return {\n    containerSize: controlHeight,\n    containerSizeLG: controlHeightLG,\n    containerSizeSM: controlHeightSM,\n    textFontSize: Math.round((fontSizeLG + fontSizeXL) / 2),\n    textFontSizeLG: fontSizeHeading3,\n    textFontSizeSM: fontSize,\n    groupSpace: marginXXS,\n    groupOverlapping: -marginXS,\n    groupBorderColor: colorBorderBg\n  };\n};\nexport default genStyleHooks('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n}, prepareComponentToken);","map":{"version":3,"sources":["D:/CNWEB/QLNH/client_app/node_modules/antd/es/avatar/style/index.js"],"names":["unit","resetComponent","genStyleHooks","mergeToken","genBaseStyle","token","antCls","componentCls","iconCls","avatarBg","avatarColor","containerSize","containerSizeLG","containerSizeSM","textFontSize","textFontSizeLG","textFontSizeSM","borderRadius","borderRadiusLG","borderRadiusSM","lineWidth","lineType","calc","avatarSizeStyle","size","fontSize","radius","width","height","lineHeight","sub","mul","equal","position","left","_skip_check_","value","transformOrigin","margin","Object","assign","display","overflow","color","whiteSpace","textAlign","verticalAlign","background","border","objectFit","genGroupStyle","groupBorderColor","groupOverlapping","groupSpace","borderColor","marginInlineStart","prepareComponentToken","controlHeight","controlHeightLG","controlHeightSM","fontSizeLG","fontSizeXL","fontSizeHeading3","marginXS","marginXXS","colorBorderBg","Math","round","colorTextLightSolid","colorTextPlaceholder","avatarToken"],"mappings":"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","sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    containerSize,\n    containerSizeLG,\n    containerSizeSM,\n    textFontSize,\n    textFontSizeLG,\n    textFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType,\n    calc\n  } = token;\n  // Avatar size style\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    lineHeight: unit(calc(size).sub(calc(lineWidth).mul(2)).equal()),\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`${componentCls}-string`]: {\n      position: 'absolute',\n      left: {\n        _skip_check_: true,\n        value: '50%'\n      },\n      transformOrigin: '0 center'\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-block',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${unit(lineWidth)} ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(containerSize, textFontSize, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(containerSizeLG, textFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(containerSizeSM, textFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    groupBorderColor,\n    groupOverlapping,\n    groupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: groupBorderColor\n      },\n      [`> *:not(:first-child)`]: {\n        marginInlineStart: groupOverlapping\n      }\n    },\n    [`${componentCls}-group-popover`]: {\n      [`${componentCls} + ${componentCls}`]: {\n        marginInlineStart: groupSpace\n      }\n    }\n  };\n};\nexport const prepareComponentToken = token => {\n  const {\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    marginXXS,\n    colorBorderBg\n  } = token;\n  return {\n    containerSize: controlHeight,\n    containerSizeLG: controlHeightLG,\n    containerSizeSM: controlHeightSM,\n    textFontSize: Math.round((fontSizeLG + fontSizeXL) / 2),\n    textFontSizeLG: fontSizeHeading3,\n    textFontSizeSM: fontSize,\n    groupSpace: marginXXS,\n    groupOverlapping: -marginXS,\n    groupBorderColor: colorBorderBg\n  };\n};\nexport default genStyleHooks('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n}, prepareComponentToken);"]},"metadata":{},"sourceType":"module"}