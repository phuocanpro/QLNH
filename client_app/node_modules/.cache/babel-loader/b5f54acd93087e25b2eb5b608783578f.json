{"ast":null,"code":"// import React, { useEffect, useRef, useState } from \"react\";\n// import { Button, Form, message } from \"antd\";\n// import TableComponent from \"./TableComponent\";\n// import { useSelector } from \"react-redux\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import {\n//   DeleteOutlined,\n//   EditOutlined,\n//   SearchOutlined,\n// } from \"@ant-design/icons\";\n// import ModalComponent from \".ModalComponent\";\n// import InputComponent from \".InputComponent\";\n// import DrawerComponent from \".DrawerComponent\";\n// const AdminUser = () => {\n//   const [isOpenDrawer, setIsOpenDrawer] = useState(false);\n//   const [rowSelected, setRowSelected] = useState(\"\");\n//   const [isModalOpenDelete, setIsModalOpenDelete] = useState(false);\n//   const user = useSelector((state) => state?.user);\n//   const [stateUserDetails, setStateUserDetails] = useState({\n//     userName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     isAdmin: \"\",\n//     phone: \"\",\n//     address: \"\",\n//     avatar: \"\",\n//   });\n//   const [form] = Form.useForm();\n//   const getAllUsers = async () => {\n//     const res = await UserService.getAllUser(user?.access_token);\n//     console.log(\"res\", res);\n//     return res;\n//   };\n//   const queryUser = useQuery({\n//     queryKey: [\"users\"],\n//     queryFn: getAllUsers,\n//   });\n//   const { isLoading: isLoadingUsers, data: users } = queryUser;\n//   const onUpdateUser = () => {\n//     mutationUpdate.mutate(\n//       {\n//         id: rowSelected,\n//         token: user?.access_token,\n//         ...stateUserDetails,\n//       },\n//       {\n//         onSettled: () => {\n//           queryUser.refetch();\n//         },\n//       }\n//     );\n//   };\n//   const mutationDelete = useMutationHooks(async (data) => {\n//     const { id, token } = data;\n//     const res = await UserService.deleteUser(id, token);\n//     return res;\n//   });\n//   const mutationUpdate = useMutationHooks(async (data) => {\n//     const { id, token, ...rests } = data;\n//     const res = await UserService.updateUser(id, { ...rests }, token);\n//     return res;\n//   });\n//   const mutationDeleteMany = useMutationHooks(async (data) => {\n//     const { token, ...ids } = data;\n//     const res = await UserService.deleteManyUser(ids, token);\n//     return res;\n//   });\n//   const handleDeleteManyUsers = (ids) => {\n//     mutationDeleteMany.mutate(\n//       { ids: ids, token: user?.access_token },\n//       {\n//         onSettled: () => {\n//           queryUser.refetch();\n//         },\n//       }\n//     );\n//   };\n//   const {\n//     data: dataDeleted,\n//     isLoading: isLoadingDeleted,\n//     isSuccess: isSuccessDeleted,\n//     isError: isErrorDeleted,\n//   } = mutationDelete;\n//   const {\n//     data: dataDeletedMany,\n//     isLoading: isLoadingDeletedMany,\n//     isSuccess: isSuccessDeletedMany,\n//     isError: isErrorDeletedMany,\n//   } = mutationDeleteMany;\n//   const {\n//     data: dataUpdated,\n//     isLoading: isLoadingUpdated,\n//     isSuccess: isSuccessUpdated,\n//     isError: isErrorUpdated,\n//   } = mutationUpdate;\n//   const fetchGetDetailsUser = async () => {\n//     const res = await UserService.getDetailsUser(\n//       rowSelected,\n//       user?.access_token\n//     );\n//     if (res?.data) {\n//       setStateUserDetails({\n//         userName: res?.data?.userName,\n//         email: res?.data?.email,\n//         password: res?.data?.password,\n//         isAdmin: res?.data?.isAdmin,\n//         phone: res?.data?.phone,\n//         address: res?.data?.address,\n//         avatar: res?.data?.avatar,\n//       });\n//     }\n//     setIsLoadingUpdate(false);\n//   };\n//   useEffect(() => {\n//     form.setFieldsValue(stateUserDetails);\n//   }, [form, stateUserDetails]);\n//   useEffect(() => {\n//     if (rowSelected && isOpenDrawer) {\n//       setIsLoadingUpdate(true);\n//       fetchGetDetailsUser(rowSelected);\n//     }\n//     // setIsOpenDrawer(true);\n//   }, [rowSelected, isOpenDrawer]);\n//   const renderAction = () => {\n//     return (\n//       <div>\n//         <DeleteOutlined\n//           style={{ color: \"red\", fontSize: \"30px\", cursor: \"pointer\" }}\n//           onClick={() => setIsModalOpenDelete(true)}\n//         />\n//         <EditOutlined\n//           style={{ color: \"orange\", fontSize: \"30px\", cursor: \"pointer\" }}\n//           onClick={handleDetailsUsers}\n//         />\n//       </div>\n//     );\n//   };\n//   const [searchText, setSearchText] = useState(\"\");\n//   const [searchedColumn, setSearchedColumn] = useState(\"\");\n//   const searchInput = useRef(null);\n//   const handleSearch = (selectedKeys, confirm, dataIndex) => {\n//     confirm();\n//     setSearchText(selectedKeys[0]);\n//     setSearchedColumn(dataIndex);\n//   };\n//   const handleReset = (clearFilters) => {\n//     clearFilters();\n//     setSearchText(\"\");\n//   };\n//   const getColumnSearchProps = (dataIndex) => ({\n//     filterDropdown: ({\n//       setSelectedKeys,\n//       selectedKeys,\n//       confirm,\n//       clearFilters,\n//     }) => (\n//       <div\n//         style={{\n//           padding: 8,\n//         }}\n//         onKeyDown={(e) => e.stopPropagation()}\n//       >\n//         <InputComponent\n//           ref={searchInput}\n//           placeholder={`Search ${dataIndex}`}\n//           value={selectedKeys[0]}\n//           onChange={(e) =>\n//             setSelectedKeys(e.target.value ? [e.target.value] : [])\n//           }\n//           onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\n//           style={{\n//             marginBottom: 8,\n//             display: \"block\",\n//           }}\n//         />\n//         <Button\n//           type=\"primary\"\n//           onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\n//           icon={<SearchOutlined />}\n//           size=\"small\"\n//           style={{\n//             width: 90,\n//           }}\n//         >\n//           Search\n//         </Button>\n//         <Button\n//           onClick={() => clearFilters && handleReset(clearFilters)}\n//           size=\"small\"\n//           style={{\n//             width: 90,\n//           }}\n//         >\n//           Reset\n//         </Button>\n//       </div>\n//     ),\n//     filterIcon: (filtered) => (\n//       <SearchOutlined\n//         style={{\n//           color: filtered ? \"#1890ff\" : undefined,\n//         }}\n//       />\n//     ),\n//     onFilter: (value, record) =>\n//       record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n//     onFilterDropdownOpenChange: (visible) => {\n//       if (visible) {\n//         setTimeout(() => searchInput.current?.select(), 100);\n//       }\n//     },\n//   });\n//   const columns = [\n//     {\n//       title: \"UserName\",\n//       dataIndex: \"userName\",\n//       sorter: (a, b) => a.userName.length - b.userName.length,\n//       ...getColumnSearchProps(\"userName\"),\n//     },\n//     {\n//       title: \"Email\",\n//       dataIndex: \"email\",\n//       sorter: (a, b) => a.email - b.email,\n//       ...getColumnSearchProps(\"email\"),\n//     },\n//     {\n//       title: \"Admin\",\n//       dataIndex: \"isAdmin\",\n//       filters: [\n//         {\n//           text: \"True\",\n//           value: true,\n//         },\n//         {\n//           text: \"False\",\n//           value: false,\n//         },\n//       ],\n//     },\n//     {\n//       title: \"Phone\",\n//       dataIndex: \"phone\",\n//       sorter: (a, b) => a.phone - b.phone,\n//       ...getColumnSearchProps(\"phone\"),\n//     },\n//     {\n//       title: \"Address\",\n//       dataIndex: \"address\",\n//     },\n//     {\n//       title: \"Action\",\n//       dataIndex: \"action\",\n//       render: renderAction,\n//     },\n//   ];\n//   const dataTable =\n//     users?.data?.length &&\n//     users?.data?.map((user) => {\n//       return {\n//         ...user,\n//         key: user._id,\n//         isAdmin: user.isAdmin ? \"TRUE\" : \"FALSE\",\n//       };\n//     });\n//   const handleCloseDrawer = () => {\n//     setIsOpenDrawer(false);\n//     setStateUserDetails({\n//       userName: \"\",\n//       email: \"\",\n//       password: \"\",\n//       isAdmin: \"\",\n//       phone: \"\",\n//       address: \"\",\n//       avatar: \"\",\n//     });\n//     form.resetFields();\n//   };\n//   useEffect(() => {\n//     if (isSuccessUpdated && dataUpdated?.status === \"OK\") {\n//       message.success();\n//       handleCloseDrawer();\n//     } else if (isErrorUpdated) {\n//       message.error();\n//     }\n//   }, [isSuccessUpdated, isErrorUpdated]);\n//   useEffect(() => {\n//     if (isSuccessDeleted && dataDeleted?.status === \"OK\") {\n//       message.success();\n//       handleCancelDelete();\n//     } else if (isErrorDeleted) {\n//       message.error();\n//     }\n//   }, [isSuccessDeleted, isErrorDeleted]);\n//   useEffect(() => {\n//     if (isSuccessDeletedMany && dataDeletedMany?.status === \"OK\") {\n//       message.success();\n//     } else if (isErrorDeletedMany) {\n//       message.error();\n//     }\n//   }, [isSuccessDeletedMany, isErrorDeletedMany]);\n//   const handleDetailsUsers = () => {\n//     setIsOpenDrawer(true);\n//   };\n//   const handleOnchangeAvatarDetails = async ({ fileList }) => {\n//     const file = fileList[0];\n//     if (!file.url && !file.preview) {\n//       file.preview = await getBase64(file.originFileObj);\n//     }\n//     console.log(\"file\", file.preview);\n//     setStateUserDetails({\n//       ...stateUserDetails,\n//       avatar: file.preview,\n//     });\n//   };\n//   const handleCancelDelete = () => {\n//     setIsModalOpenDelete(false);\n//   };\n//   const handleDeleteUser = () => {\n//     mutationDelete.mutate(\n//       { id: rowSelected, token: user?.access_token },\n//       {\n//         onSettled: () => {\n//           queryUser.refetch();\n//         },\n//       }\n//     );\n//   };\n//   const handleOnchangeDetails = (e) => {\n//     setStateUserDetails({\n//       ...stateUserDetails,\n//       [e.target.name]: e.target.value,\n//     });\n//   };\n//   return (\n//     <div style={{ marginTop: \"10px\" }}>\n//       <h1 style={{ color: \"#fff\", \"font-size\": \"14px\" }}>Manager Users</h1>\n//       <div style={{ marginTop: \"20px\" }}>\n//         <TableComponent\n//           handleDeleteMany={handleDeleteManyUsers}\n//           columns={columns}\n//           isLoading={isLoadingUsers}\n//           data={dataTable}\n//           onRow={(record, rowIndex) => {\n//             return {\n//               onClick: (event) => {\n//                 setRowSelected(record._id);\n//               },\n//             };\n//           }}\n//         />\n//       </div>\n//       <DrawerComponent\n//         title=\"Details User\"\n//         isOpen={isOpenDrawer}\n//         onClose={() => setIsOpenDrawer(false)}\n//         width=\"90%\"\n//       >\n//         <Form\n//           name=\"basic\"\n//           labelCol={{ span: 6 }}\n//           wrapperCol={{ span: 18 }}\n//           style={{ maxWidth: 600 }}\n//           initialValues={{ remember: true }}\n//           onFinish={onUpdateUser}\n//           autoComplete=\"on\"\n//           form={form}\n//         >\n//           <Form.Item\n//             label=\"UserName\"\n//             name=\"userName\"\n//             rules={[{ required: true, message: \"Please input userName!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.userName}\n//               onChange={handleOnchangeDetails}\n//               name=\"userName\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Email\"\n//             name=\"email\"\n//             rules={[{ required: true, message: \"Please input email!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.email}\n//               onChange={handleOnchangeDetails}\n//               name=\"email\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Password\"\n//             name=\"password\"\n//             rules={[{ required: true, message: \"Please input password!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.password}\n//               onChange={handleOnchangeDetails}\n//               name=\"password\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Admin\"\n//             name=\"isAdmin\"\n//             rules={[{ required: true, message: \"Please input isAdmin!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.isAdmin}\n//               onChange={handleOnchangeDetails}\n//               name=\"isAdmin\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Phone\"\n//             name=\"phone\"\n//             rules={[{ required: true, message: \"Please input phone!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.phone}\n//               onChange={handleOnchangeDetails}\n//               name=\"phone\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Address\"\n//             name=\"address\"\n//             rules={[{ required: true, message: \"Please input address!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.address}\n//               onChange={handleOnchangeDetails}\n//               name=\"address\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Avatar\"\n//             name=\"avatar\"\n//             rules={[{ required: true, message: \"Please input avatar!\" }]}\n//           >\n//             <WrapperUploadFile\n//               onChange={handleOnchangeAvatarDetails}\n//               maxCount={1}\n//             >\n//               <Button type=\"button\">Select File</Button>\n//               {stateUserDetails?.avatar && (\n//                 <img\n//                   src={stateUserDetails?.avatar}\n//                   style={{\n//                     height: \"60px\",\n//                     width: \"60px\",\n//                     borderRadius: \"50%\",\n//                     objectFit: \"cover\",\n//                     marginLeft: \"10px\",\n//                   }}\n//                   alt=\"game\"\n//                 />\n//               )}\n//             </WrapperUploadFile>\n//           </Form.Item>\n//           <Form.Item wrapperCol={{ offset: 20, span: 16 }}>\n//             <Button type=\"primary\" htmlType=\"submit\">\n//               Submit\n//             </Button>\n//           </Form.Item>\n//         </Form>\n//       </DrawerComponent>\n//       <ModalComponent\n//         title=\"Delete User\"\n//         open={isModalOpenDelete}\n//         onCancel={handleCancelDelete}\n//         onOk={handleDeleteUser}\n//       >\n//         <div>Are you sure delete this user?</div>\n//       </ModalComponent>\n//     </div>\n//   );\n// };\n// export default AdminUser;","map":{"version":3,"sources":["D:/CNWEB/QLNH/client_app/src/AdminPage/AdminUser.jsx"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import { Button, Form, message } from \"antd\";\n// import TableComponent from \"./TableComponent\";\n// import { useSelector } from \"react-redux\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import {\n//   DeleteOutlined,\n//   EditOutlined,\n//   SearchOutlined,\n// } from \"@ant-design/icons\";\n// import ModalComponent from \".ModalComponent\";\n// import InputComponent from \".InputComponent\";\n// import DrawerComponent from \".DrawerComponent\";\n\n// const AdminUser = () => {\n//   const [isOpenDrawer, setIsOpenDrawer] = useState(false);\n//   const [rowSelected, setRowSelected] = useState(\"\");\n//   const [isModalOpenDelete, setIsModalOpenDelete] = useState(false);\n\n//   const user = useSelector((state) => state?.user);\n\n//   const [stateUserDetails, setStateUserDetails] = useState({\n//     userName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     isAdmin: \"\",\n//     phone: \"\",\n//     address: \"\",\n//     avatar: \"\",\n//   });\n\n//   const [form] = Form.useForm();\n\n//   const getAllUsers = async () => {\n//     const res = await UserService.getAllUser(user?.access_token);\n//     console.log(\"res\", res);\n//     return res;\n//   };\n//   const queryUser = useQuery({\n//     queryKey: [\"users\"],\n//     queryFn: getAllUsers,\n//   });\n\n//   const { isLoading: isLoadingUsers, data: users } = queryUser;\n//   const onUpdateUser = () => {\n//     mutationUpdate.mutate(\n//       {\n//         id: rowSelected,\n//         token: user?.access_token,\n//         ...stateUserDetails,\n//       },\n//       {\n//         onSettled: () => {\n//           queryUser.refetch();\n//         },\n//       }\n//     );\n//   };\n\n//   const mutationDelete = useMutationHooks(async (data) => {\n//     const { id, token } = data;\n//     const res = await UserService.deleteUser(id, token);\n//     return res;\n//   });\n//   const mutationUpdate = useMutationHooks(async (data) => {\n//     const { id, token, ...rests } = data;\n//     const res = await UserService.updateUser(id, { ...rests }, token);\n//     return res;\n//   });\n\n//   const mutationDeleteMany = useMutationHooks(async (data) => {\n//     const { token, ...ids } = data;\n//     const res = await UserService.deleteManyUser(ids, token);\n//     return res;\n//   });\n//   const handleDeleteManyUsers = (ids) => {\n//     mutationDeleteMany.mutate(\n//       { ids: ids, token: user?.access_token },\n//       {\n//         onSettled: () => {\n//           queryUser.refetch();\n//         },\n//       }\n//     );\n//   };\n//   const {\n//     data: dataDeleted,\n//     isLoading: isLoadingDeleted,\n//     isSuccess: isSuccessDeleted,\n//     isError: isErrorDeleted,\n//   } = mutationDelete;\n\n//   const {\n//     data: dataDeletedMany,\n//     isLoading: isLoadingDeletedMany,\n//     isSuccess: isSuccessDeletedMany,\n//     isError: isErrorDeletedMany,\n//   } = mutationDeleteMany;\n\n//   const {\n//     data: dataUpdated,\n//     isLoading: isLoadingUpdated,\n//     isSuccess: isSuccessUpdated,\n//     isError: isErrorUpdated,\n//   } = mutationUpdate;\n\n//   const fetchGetDetailsUser = async () => {\n//     const res = await UserService.getDetailsUser(\n//       rowSelected,\n//       user?.access_token\n//     );\n//     if (res?.data) {\n//       setStateUserDetails({\n//         userName: res?.data?.userName,\n//         email: res?.data?.email,\n//         password: res?.data?.password,\n//         isAdmin: res?.data?.isAdmin,\n//         phone: res?.data?.phone,\n//         address: res?.data?.address,\n//         avatar: res?.data?.avatar,\n//       });\n//     }\n//     setIsLoadingUpdate(false);\n//   };\n//   useEffect(() => {\n//     form.setFieldsValue(stateUserDetails);\n//   }, [form, stateUserDetails]);\n\n//   useEffect(() => {\n//     if (rowSelected && isOpenDrawer) {\n//       setIsLoadingUpdate(true);\n//       fetchGetDetailsUser(rowSelected);\n//     }\n//     // setIsOpenDrawer(true);\n//   }, [rowSelected, isOpenDrawer]);\n\n//   const renderAction = () => {\n//     return (\n//       <div>\n//         <DeleteOutlined\n//           style={{ color: \"red\", fontSize: \"30px\", cursor: \"pointer\" }}\n//           onClick={() => setIsModalOpenDelete(true)}\n//         />\n//         <EditOutlined\n//           style={{ color: \"orange\", fontSize: \"30px\", cursor: \"pointer\" }}\n//           onClick={handleDetailsUsers}\n//         />\n//       </div>\n//     );\n//   };\n\n//   const [searchText, setSearchText] = useState(\"\");\n//   const [searchedColumn, setSearchedColumn] = useState(\"\");\n//   const searchInput = useRef(null);\n\n//   const handleSearch = (selectedKeys, confirm, dataIndex) => {\n//     confirm();\n//     setSearchText(selectedKeys[0]);\n//     setSearchedColumn(dataIndex);\n//   };\n\n//   const handleReset = (clearFilters) => {\n//     clearFilters();\n//     setSearchText(\"\");\n//   };\n\n//   const getColumnSearchProps = (dataIndex) => ({\n//     filterDropdown: ({\n//       setSelectedKeys,\n//       selectedKeys,\n//       confirm,\n//       clearFilters,\n//     }) => (\n//       <div\n//         style={{\n//           padding: 8,\n//         }}\n//         onKeyDown={(e) => e.stopPropagation()}\n//       >\n//         <InputComponent\n//           ref={searchInput}\n//           placeholder={`Search ${dataIndex}`}\n//           value={selectedKeys[0]}\n//           onChange={(e) =>\n//             setSelectedKeys(e.target.value ? [e.target.value] : [])\n//           }\n//           onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\n//           style={{\n//             marginBottom: 8,\n//             display: \"block\",\n//           }}\n//         />\n\n//         <Button\n//           type=\"primary\"\n//           onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\n//           icon={<SearchOutlined />}\n//           size=\"small\"\n//           style={{\n//             width: 90,\n//           }}\n//         >\n//           Search\n//         </Button>\n//         <Button\n//           onClick={() => clearFilters && handleReset(clearFilters)}\n//           size=\"small\"\n//           style={{\n//             width: 90,\n//           }}\n//         >\n//           Reset\n//         </Button>\n//       </div>\n//     ),\n//     filterIcon: (filtered) => (\n//       <SearchOutlined\n//         style={{\n//           color: filtered ? \"#1890ff\" : undefined,\n//         }}\n//       />\n//     ),\n//     onFilter: (value, record) =>\n//       record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n//     onFilterDropdownOpenChange: (visible) => {\n//       if (visible) {\n//         setTimeout(() => searchInput.current?.select(), 100);\n//       }\n//     },\n//   });\n\n//   const columns = [\n//     {\n//       title: \"UserName\",\n//       dataIndex: \"userName\",\n//       sorter: (a, b) => a.userName.length - b.userName.length,\n//       ...getColumnSearchProps(\"userName\"),\n//     },\n//     {\n//       title: \"Email\",\n//       dataIndex: \"email\",\n//       sorter: (a, b) => a.email - b.email,\n//       ...getColumnSearchProps(\"email\"),\n//     },\n//     {\n//       title: \"Admin\",\n//       dataIndex: \"isAdmin\",\n//       filters: [\n//         {\n//           text: \"True\",\n//           value: true,\n//         },\n//         {\n//           text: \"False\",\n//           value: false,\n//         },\n//       ],\n//     },\n//     {\n//       title: \"Phone\",\n//       dataIndex: \"phone\",\n//       sorter: (a, b) => a.phone - b.phone,\n//       ...getColumnSearchProps(\"phone\"),\n//     },\n//     {\n//       title: \"Address\",\n//       dataIndex: \"address\",\n//     },\n//     {\n//       title: \"Action\",\n//       dataIndex: \"action\",\n//       render: renderAction,\n//     },\n//   ];\n\n//   const dataTable =\n//     users?.data?.length &&\n//     users?.data?.map((user) => {\n//       return {\n//         ...user,\n//         key: user._id,\n//         isAdmin: user.isAdmin ? \"TRUE\" : \"FALSE\",\n//       };\n//     });\n\n//   const handleCloseDrawer = () => {\n//     setIsOpenDrawer(false);\n//     setStateUserDetails({\n//       userName: \"\",\n//       email: \"\",\n//       password: \"\",\n//       isAdmin: \"\",\n//       phone: \"\",\n//       address: \"\",\n//       avatar: \"\",\n//     });\n//     form.resetFields();\n//   };\n\n//   useEffect(() => {\n//     if (isSuccessUpdated && dataUpdated?.status === \"OK\") {\n//       message.success();\n//       handleCloseDrawer();\n//     } else if (isErrorUpdated) {\n//       message.error();\n//     }\n//   }, [isSuccessUpdated, isErrorUpdated]);\n\n//   useEffect(() => {\n//     if (isSuccessDeleted && dataDeleted?.status === \"OK\") {\n//       message.success();\n//       handleCancelDelete();\n//     } else if (isErrorDeleted) {\n//       message.error();\n//     }\n//   }, [isSuccessDeleted, isErrorDeleted]);\n\n//   useEffect(() => {\n//     if (isSuccessDeletedMany && dataDeletedMany?.status === \"OK\") {\n//       message.success();\n//     } else if (isErrorDeletedMany) {\n//       message.error();\n//     }\n//   }, [isSuccessDeletedMany, isErrorDeletedMany]);\n//   const handleDetailsUsers = () => {\n//     setIsOpenDrawer(true);\n//   };\n//   const handleOnchangeAvatarDetails = async ({ fileList }) => {\n//     const file = fileList[0];\n//     if (!file.url && !file.preview) {\n//       file.preview = await getBase64(file.originFileObj);\n//     }\n\n//     console.log(\"file\", file.preview);\n//     setStateUserDetails({\n//       ...stateUserDetails,\n//       avatar: file.preview,\n//     });\n//   };\n//   const handleCancelDelete = () => {\n//     setIsModalOpenDelete(false);\n//   };\n\n//   const handleDeleteUser = () => {\n//     mutationDelete.mutate(\n//       { id: rowSelected, token: user?.access_token },\n//       {\n//         onSettled: () => {\n//           queryUser.refetch();\n//         },\n//       }\n//     );\n//   };\n\n//   const handleOnchangeDetails = (e) => {\n//     setStateUserDetails({\n//       ...stateUserDetails,\n//       [e.target.name]: e.target.value,\n//     });\n//   };\n\n//   return (\n//     <div style={{ marginTop: \"10px\" }}>\n//       <h1 style={{ color: \"#fff\", \"font-size\": \"14px\" }}>Manager Users</h1>\n//       <div style={{ marginTop: \"20px\" }}>\n//         <TableComponent\n//           handleDeleteMany={handleDeleteManyUsers}\n//           columns={columns}\n//           isLoading={isLoadingUsers}\n//           data={dataTable}\n//           onRow={(record, rowIndex) => {\n//             return {\n//               onClick: (event) => {\n//                 setRowSelected(record._id);\n//               },\n//             };\n//           }}\n//         />\n//       </div>\n\n//       <DrawerComponent\n//         title=\"Details User\"\n//         isOpen={isOpenDrawer}\n//         onClose={() => setIsOpenDrawer(false)}\n//         width=\"90%\"\n//       >\n//         <Form\n//           name=\"basic\"\n//           labelCol={{ span: 6 }}\n//           wrapperCol={{ span: 18 }}\n//           style={{ maxWidth: 600 }}\n//           initialValues={{ remember: true }}\n//           onFinish={onUpdateUser}\n//           autoComplete=\"on\"\n//           form={form}\n//         >\n//           <Form.Item\n//             label=\"UserName\"\n//             name=\"userName\"\n//             rules={[{ required: true, message: \"Please input userName!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.userName}\n//               onChange={handleOnchangeDetails}\n//               name=\"userName\"\n//             />\n//           </Form.Item>\n\n//           <Form.Item\n//             label=\"Email\"\n//             name=\"email\"\n//             rules={[{ required: true, message: \"Please input email!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.email}\n//               onChange={handleOnchangeDetails}\n//               name=\"email\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Password\"\n//             name=\"password\"\n//             rules={[{ required: true, message: \"Please input password!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.password}\n//               onChange={handleOnchangeDetails}\n//               name=\"password\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Admin\"\n//             name=\"isAdmin\"\n//             rules={[{ required: true, message: \"Please input isAdmin!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.isAdmin}\n//               onChange={handleOnchangeDetails}\n//               name=\"isAdmin\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Phone\"\n//             name=\"phone\"\n//             rules={[{ required: true, message: \"Please input phone!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.phone}\n//               onChange={handleOnchangeDetails}\n//               name=\"phone\"\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             label=\"Address\"\n//             name=\"address\"\n//             rules={[{ required: true, message: \"Please input address!\" }]}\n//           >\n//             <InputComponent\n//               value={stateUserDetails.address}\n//               onChange={handleOnchangeDetails}\n//               name=\"address\"\n//             />\n//           </Form.Item>\n\n//           <Form.Item\n//             label=\"Avatar\"\n//             name=\"avatar\"\n//             rules={[{ required: true, message: \"Please input avatar!\" }]}\n//           >\n//             <WrapperUploadFile\n//               onChange={handleOnchangeAvatarDetails}\n//               maxCount={1}\n//             >\n//               <Button type=\"button\">Select File</Button>\n//               {stateUserDetails?.avatar && (\n//                 <img\n//                   src={stateUserDetails?.avatar}\n//                   style={{\n//                     height: \"60px\",\n//                     width: \"60px\",\n//                     borderRadius: \"50%\",\n//                     objectFit: \"cover\",\n//                     marginLeft: \"10px\",\n//                   }}\n//                   alt=\"game\"\n//                 />\n//               )}\n//             </WrapperUploadFile>\n//           </Form.Item>\n//           <Form.Item wrapperCol={{ offset: 20, span: 16 }}>\n//             <Button type=\"primary\" htmlType=\"submit\">\n//               Submit\n//             </Button>\n//           </Form.Item>\n//         </Form>\n//       </DrawerComponent>\n\n//       <ModalComponent\n//         title=\"Delete User\"\n//         open={isModalOpenDelete}\n//         onCancel={handleCancelDelete}\n//         onOk={handleDeleteUser}\n//       >\n//         <div>Are you sure delete this user?</div>\n//       </ModalComponent>\n//     </div>\n//   );\n// };\n\n// export default AdminUser;\n"]},"metadata":{},"sourceType":"module"}