{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sheet = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _row = require(\"./row\");\n\nvar _col = require(\"./col\");\n\nvar _style = require(\"./style\");\n\nvar _lib = require(\"./lib\");\n\nvar _xmlWorksheet = require(\"./xmlWorksheet\");\n/**\n * Sheet of the xlsx file.\n * ```js\n * import { File } from 'better-xlsx';\n * const file = new File();\n * const sheet = file.addSheet('Sheet-1');\n * const row = sheet.addRow();\n * const cell = row.addCell();\n * ```\n */\n\n\nvar Sheet = /*#__PURE__*/function () {\n  function Sheet(_ref) {\n    var name = _ref.name,\n        file = _ref.file,\n        selected = _ref.selected;\n    (0, _classCallCheck2.default)(this, Sheet);\n    (0, _defineProperty2.default)(this, \"rows\", []);\n    (0, _defineProperty2.default)(this, \"cols\", []);\n    (0, _defineProperty2.default)(this, \"maxRow\", 0);\n    (0, _defineProperty2.default)(this, \"maxCol\", 0);\n    (0, _defineProperty2.default)(this, \"hidden\", false);\n    (0, _defineProperty2.default)(this, \"sheetViews\", []);\n    (0, _defineProperty2.default)(this, \"sheetFormat\", {\n      defaultColWidth: 0,\n      defaultRowHeight: 0,\n      outlineLevelCol: 0,\n      outlineLevelRow: 0\n    });\n    this.name = name;\n    this.file = file;\n    this.selected = selected;\n  }\n  /**\n   * Create a Row and add it into the Sheet.\n   * @return {Row}\n   */\n\n\n  (0, _createClass2.default)(Sheet, [{\n    key: \"addRow\",\n    value: function addRow() {\n      var row = new _row.Row({\n        sheet: this\n      });\n      this.rows.push(row);\n\n      if (this.rows.length > this.maxRow) {\n        this.maxRow = this.rows.length;\n      }\n\n      return row;\n    }\n  }, {\n    key: \"maybeAddCol\",\n    value: function maybeAddCol(cellCount) {\n      if (cellCount > this.maxCol) {\n        var col = new _col.Col({\n          min: cellCount,\n          max: cellCount,\n          hidden: false,\n          collapsed: false\n        });\n        this.cols.push(col);\n        this.maxCol = cellCount;\n      }\n    }\n    /**\n     * Get Col of the sheet with index and create cols when `index > maxCol`.\n     * @param  {Number} idx Index of the Col [from 0].\n     * @return {Col}\n     */\n\n  }, {\n    key: \"col\",\n    value: function col(idx) {\n      this.maybeAddCol(idx + 1);\n      return this.cols[idx];\n    }\n    /**\n     * Get Row of the sheet with index and create rows when `index > maxRow`.\n     * @param  {Number} idx Index of the Row [from 0].\n     * @return {Row}\n     */\n\n  }, {\n    key: \"row\",\n    value: function row(idx) {\n      for (var len = this.rows.length; len <= idx; len++) {\n        this.addRow();\n      }\n\n      return this.rows[idx];\n    }\n    /**\n     * Get Cell of the sheet with `(row, col)` and create cell when out of range.\n     * @param  {Number} row\n     * @param {Number} col\n     * @return {Cell}\n     */\n\n  }, {\n    key: \"cell\",\n    value: function cell(row, col) {\n      for (var len = this.rows.length; len <= row; len++) {\n        this.addRow();\n      }\n\n      var r = this.rows[row];\n\n      for (var _len = r.cells.length; _len <= col; _len++) {\n        r.addCell();\n      }\n\n      return r.cells[col];\n    }\n    /**\n     * Set columns width from `startcol` to `endcol`.\n     * @param {Number} startcol\n     * @param {Number} endcol\n     * @param {Number} width\n     */\n\n  }, {\n    key: \"setColWidth\",\n    value: function setColWidth(startcol, endcol, width) {\n      if (startcol > endcol) {\n        throw new Error(`Could not set width for range ${startcol}-${endcol}: startcol must be less than endcol.`);\n      }\n\n      var col = new _col.Col({\n        min: startcol + 1,\n        max: endcol + 1,\n        hidden: false,\n        collapsed: false,\n        width: width\n      });\n      this.cols.push(col);\n\n      if (endcol + 1 > this.maxCol) {\n        this.maxCol = endcol + 1;\n      }\n    }\n  }, {\n    key: \"handleMerged\",\n    value: function handleMerged() {\n      var _this = this;\n\n      var merged = [];\n\n      for (var r = 0; r < this.rows.length; r++) {\n        var row = this.rows[r];\n\n        for (var c = 0; c < row.cells.length; c++) {\n          var cell = row.cells[c];\n\n          if (cell.hMerge > 0 || cell.vMerge > 0) {\n            merged.push({\n              r,\n              c,\n              cell\n            });\n          }\n        }\n      }\n\n      var _loop = function _loop() {\n        var _merged$_i = _merged[_i],\n            r = _merged$_i.r,\n            c = _merged$_i.c,\n            cell = _merged$_i.cell;\n        var border = cell.style.border;\n        cell.style.border = new _style.Border({});\n\n        for (var rownum = 0; rownum <= cell.vMerge; rownum++) {\n          var _loop2 = function _loop2(colnum) {\n            var tmpcell = _this.cell(r + rownum, c + colnum);\n\n            var arr = [];\n\n            if (rownum === 0) {\n              arr.push('top');\n            }\n\n            if (rownum === cell.vMerge) {\n              arr.push('bottom');\n            }\n\n            if (colnum === 0) {\n              arr.push('left');\n            }\n\n            if (colnum === cell.hMerge) {\n              arr.push('right');\n            }\n\n            if (arr.length) {\n              tmpcell.style.applyBorder = true;\n              arr.forEach(function (k) {\n                var ck = `${k}Color`;\n                tmpcell.style.border[k] = border[k];\n                tmpcell.style.border[ck] = border[ck];\n              });\n            }\n          };\n\n          for (var colnum = 0; colnum <= cell.hMerge; colnum++) {\n            _loop2(colnum);\n          }\n        }\n      };\n\n      for (var _i = 0, _merged = merged; _i < _merged.length; _i++) {\n        _loop();\n      }\n    }\n  }, {\n    key: \"makeXSheet\",\n    value: function makeXSheet(refTable, styles) {\n      var sheet = (0, _xmlWorksheet.makeXworksheet)();\n      var xSheet = new _xmlWorksheet.XsheetData();\n      var maxRow = 0;\n      var maxCell = 0;\n      var maxLevelCol;\n      var maxLevelRow;\n      this.handleMerged();\n\n      for (var i = 0; i < this.sheetViews.length; i++) {\n        var view = this.sheetViews[i];\n\n        if (view && view.pane) {\n          sheet.sheetViews.children[i].children.push(new _xmlWorksheet.Xpane({\n            xSplit: view.pane.xSplit,\n            ySplit: view.pane.ySplit,\n            topLeftCell: view.pane.topLeftCell,\n            activePane: view.pane.activePane,\n            state: view.pane.state\n          }));\n        }\n      }\n\n      if (this.selected) {\n        sheet.sheetViews.children[0].tabSelected = true;\n      }\n\n      if (this.sheetFormat.defaultRowHeight !== 0) {\n        sheet.sheetFormatPr.defaultRowHeight = this.sheetFormat.defaultRowHeight;\n      }\n\n      if (this.sheetFormat.defaultColWidth !== 0) {\n        sheet.sheetFormatPr.defaultColWidth = this.sheetFormat.defaultColWidth;\n      }\n\n      var fIdList = [];\n      sheet.cols = new _xmlWorksheet.Xcols();\n\n      for (var c = 0; c < this.cols.length; c++) {\n        var col = this.cols[c];\n        col.min = col.min || 1;\n        col.max = col.max || 1;\n        var xNumFmt = styles.newNumFmt(col.numFmt);\n        var fId = (0, _style.handleStyle)(col.style, xNumFmt.numFmtId, styles);\n        fIdList.push(fId);\n        var customWidth = 0;\n\n        if (col.width === 0) {\n          col.width = 9.5;\n        } else {\n          customWidth = 1;\n        }\n\n        sheet.cols.children.push(new _xmlWorksheet.Xcol({\n          min: col.min,\n          max: col.max,\n          hidden: col.hidden,\n          width: col.width,\n          customWidth: customWidth,\n          collapsed: col.collapsed,\n          outlineLevel: col.outlineLevel,\n          style: fId\n        }));\n\n        if (col.outlineLevel > maxLevelCol) {\n          maxLevelCol = col.outlineLevel;\n        }\n      }\n\n      for (var r = 0; r < this.rows.length; r++) {\n        var row = this.rows[r];\n        if (r > maxRow) maxRow = r;\n        var xRow = new _xmlWorksheet.Xrow({\n          r: r + 1\n        });\n\n        if (row.isCustom) {\n          xRow.customHeight = true;\n          xRow.ht = row.height;\n        }\n\n        xRow.outlineLevel = row.outlineLevel;\n\n        if (row.outlineLevel > maxLevelRow) {\n          maxLevelRow = row.outlineLevel;\n        }\n\n        for (var _c = 0; _c < row.cells.length; _c++) {\n          var _fId = fIdList[_c];\n          var cell = row.cells[_c];\n\n          var _xNumFmt = styles.newNumFmt(cell.numFmt);\n\n          var style = cell.style;\n\n          if (style !== null) {\n            _fId = (0, _style.handleStyle)(style, _xNumFmt.numFmtId, styles);\n          } else if (cell.numFmt && this.cols[_c].numFmt !== cell.numFmt) {\n            _fId = (0, _style.handleNumFmtId)(_xNumFmt.NumFmtId, styles);\n          }\n\n          if (_c > maxCell) maxCell = _c;\n          var xC = new _xmlWorksheet.Xc({\n            r: `${(0, _lib.num2col)(_c)}${r + 1}`\n          });\n\n          switch (cell.cellType) {\n            case 'TypeString':\n              if (cell.value) {\n                xC.v = refTable.addString(cell.value);\n              }\n\n              xC.t = 's';\n              xC.s = _fId;\n              break;\n\n            case 'TypeBool':\n              xC.v = cell.value;\n              xC.t = 'b';\n              xC.s = _fId;\n              break;\n\n            case 'TypeNumeric':\n              xC.v = cell.value;\n              xC.s = _fId;\n              break;\n\n            case 'TypeDate':\n              xC.v = cell.value;\n              xC.s = _fId;\n              break;\n\n            case 'TypeFormula':\n              xC.v = cell.value;\n              xC.f = new _xmlWorksheet.Xf({}, [cell.formula]);\n              xC.s = _fId;\n              break;\n\n            case 'TypeError':\n              xC.v = cell.value;\n              xC.f = new _xmlWorksheet.Xf({}, [cell.formula]);\n              xC.t = 'e';\n              xC.s = _fId;\n              break;\n\n            case 'TypeGeneral':\n              xC.v = cell.value;\n              xC.s = _fId;\n              break;\n          }\n\n          xRow.children.push(xC);\n\n          if (cell.hMerge > 0 || cell.vMerge > 0) {\n            // r == rownum, c == colnum\n            var start = `${(0, _lib.num2col)(_c)}${r + 1}`;\n            var endcol = _c + cell.hMerge;\n            var endrow = r + cell.vMerge + 1;\n            var end = `${(0, _lib.num2col)(endcol)}${endrow}`;\n            var mc = new _xmlWorksheet.XmergeCell({\n              ref: start + ':' + end\n            });\n\n            if (sheet.mergeCells === null) {\n              sheet.mergeCells = new _xmlWorksheet.XmergeCells();\n            }\n\n            sheet.mergeCells.children.push(mc);\n          }\n        }\n\n        xSheet.children.push(xRow);\n      } // Update sheet format with the freshly determined max levels\n\n\n      this.sheetFormat.outlineLevelCol = maxLevelCol;\n      this.sheetFormat.outlineLevelRow = maxLevelRow; // .. and then also apply this to the xml worksheet\n\n      sheet.sheetFormatPr.outlineLevelCol = this.sheetFormat.outlineLevelCol;\n      sheet.sheetFormatPr.outlineLevelRow = this.sheetFormat.outlineLevelRow;\n\n      if (sheet.mergeCells !== null) {\n        sheet.mergeCells.count = sheet.mergeCells.children.length;\n      }\n\n      sheet.sheetData = xSheet;\n      var dimension = new _xmlWorksheet.Xdimension({\n        ref: `A1:${(0, _lib.num2col)(maxCell)}${maxRow + 1}`\n      });\n\n      if (dimension.ref === 'A1:A1') {\n        dimension.ref = 'A1';\n      }\n\n      sheet.dimension = dimension;\n\n      if (this.afterMake) {\n        this.afterMake(sheet);\n      }\n\n      return sheet;\n    }\n  }]);\n  return Sheet;\n}();\n\nexports.Sheet = Sheet;","map":{"version":3,"sources":["D:/CNWEB/QLNH/client_app/node_modules/better-xlsx/lib/sheet.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","Sheet","_classCallCheck2","_createClass2","_defineProperty2","_row","_col","_style","_lib","_xmlWorksheet","_ref","name","file","selected","default","defaultColWidth","defaultRowHeight","outlineLevelCol","outlineLevelRow","key","addRow","row","Row","sheet","rows","push","length","maxRow","maybeAddCol","cellCount","maxCol","col","Col","min","max","hidden","collapsed","cols","idx","len","cell","r","_len","cells","addCell","setColWidth","startcol","endcol","width","Error","handleMerged","_this","merged","c","hMerge","vMerge","_loop","_merged$_i","_merged","_i","border","style","Border","rownum","_loop2","colnum","tmpcell","arr","applyBorder","forEach","k","ck","makeXSheet","refTable","styles","makeXworksheet","xSheet","XsheetData","maxCell","maxLevelCol","maxLevelRow","i","sheetViews","view","pane","children","Xpane","xSplit","ySplit","topLeftCell","activePane","state","tabSelected","sheetFormat","sheetFormatPr","fIdList","Xcols","xNumFmt","newNumFmt","numFmt","fId","handleStyle","numFmtId","customWidth","Xcol","outlineLevel","xRow","Xrow","isCustom","customHeight","ht","height","_c","_fId","_xNumFmt","handleNumFmtId","NumFmtId","xC","Xc","num2col","cellType","v","addString","t","s","f","Xf","formula","start","endrow","end","mc","XmergeCell","ref","mergeCells","XmergeCells","count","sheetData","dimension","Xdimension","afterMake"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sheet = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _row = require(\"./row\");\n\nvar _col = require(\"./col\");\n\nvar _style = require(\"./style\");\n\nvar _lib = require(\"./lib\");\n\nvar _xmlWorksheet = require(\"./xmlWorksheet\");\n\n/**\n * Sheet of the xlsx file.\n * ```js\n * import { File } from 'better-xlsx';\n * const file = new File();\n * const sheet = file.addSheet('Sheet-1');\n * const row = sheet.addRow();\n * const cell = row.addCell();\n * ```\n */\nvar Sheet = /*#__PURE__*/function () {\n  function Sheet(_ref) {\n    var name = _ref.name,\n        file = _ref.file,\n        selected = _ref.selected;\n    (0, _classCallCheck2.default)(this, Sheet);\n    (0, _defineProperty2.default)(this, \"rows\", []);\n    (0, _defineProperty2.default)(this, \"cols\", []);\n    (0, _defineProperty2.default)(this, \"maxRow\", 0);\n    (0, _defineProperty2.default)(this, \"maxCol\", 0);\n    (0, _defineProperty2.default)(this, \"hidden\", false);\n    (0, _defineProperty2.default)(this, \"sheetViews\", []);\n    (0, _defineProperty2.default)(this, \"sheetFormat\", {\n      defaultColWidth: 0,\n      defaultRowHeight: 0,\n      outlineLevelCol: 0,\n      outlineLevelRow: 0\n    });\n    this.name = name;\n    this.file = file;\n    this.selected = selected;\n  }\n  /**\n   * Create a Row and add it into the Sheet.\n   * @return {Row}\n   */\n\n\n  (0, _createClass2.default)(Sheet, [{\n    key: \"addRow\",\n    value: function addRow() {\n      var row = new _row.Row({\n        sheet: this\n      });\n      this.rows.push(row);\n\n      if (this.rows.length > this.maxRow) {\n        this.maxRow = this.rows.length;\n      }\n\n      return row;\n    }\n  }, {\n    key: \"maybeAddCol\",\n    value: function maybeAddCol(cellCount) {\n      if (cellCount > this.maxCol) {\n        var col = new _col.Col({\n          min: cellCount,\n          max: cellCount,\n          hidden: false,\n          collapsed: false\n        });\n        this.cols.push(col);\n        this.maxCol = cellCount;\n      }\n    }\n    /**\n     * Get Col of the sheet with index and create cols when `index > maxCol`.\n     * @param  {Number} idx Index of the Col [from 0].\n     * @return {Col}\n     */\n\n  }, {\n    key: \"col\",\n    value: function col(idx) {\n      this.maybeAddCol(idx + 1);\n      return this.cols[idx];\n    }\n    /**\n     * Get Row of the sheet with index and create rows when `index > maxRow`.\n     * @param  {Number} idx Index of the Row [from 0].\n     * @return {Row}\n     */\n\n  }, {\n    key: \"row\",\n    value: function row(idx) {\n      for (var len = this.rows.length; len <= idx; len++) {\n        this.addRow();\n      }\n\n      return this.rows[idx];\n    }\n    /**\n     * Get Cell of the sheet with `(row, col)` and create cell when out of range.\n     * @param  {Number} row\n     * @param {Number} col\n     * @return {Cell}\n     */\n\n  }, {\n    key: \"cell\",\n    value: function cell(row, col) {\n      for (var len = this.rows.length; len <= row; len++) {\n        this.addRow();\n      }\n\n      var r = this.rows[row];\n\n      for (var _len = r.cells.length; _len <= col; _len++) {\n        r.addCell();\n      }\n\n      return r.cells[col];\n    }\n    /**\n     * Set columns width from `startcol` to `endcol`.\n     * @param {Number} startcol\n     * @param {Number} endcol\n     * @param {Number} width\n     */\n\n  }, {\n    key: \"setColWidth\",\n    value: function setColWidth(startcol, endcol, width) {\n      if (startcol > endcol) {\n        throw new Error(`Could not set width for range ${startcol}-${endcol}: startcol must be less than endcol.`);\n      }\n\n      var col = new _col.Col({\n        min: startcol + 1,\n        max: endcol + 1,\n        hidden: false,\n        collapsed: false,\n        width: width\n      });\n      this.cols.push(col);\n\n      if (endcol + 1 > this.maxCol) {\n        this.maxCol = endcol + 1;\n      }\n    }\n  }, {\n    key: \"handleMerged\",\n    value: function handleMerged() {\n      var _this = this;\n\n      var merged = [];\n\n      for (var r = 0; r < this.rows.length; r++) {\n        var row = this.rows[r];\n\n        for (var c = 0; c < row.cells.length; c++) {\n          var cell = row.cells[c];\n\n          if (cell.hMerge > 0 || cell.vMerge > 0) {\n            merged.push({\n              r,\n              c,\n              cell\n            });\n          }\n        }\n      }\n\n      var _loop = function _loop() {\n        var _merged$_i = _merged[_i],\n            r = _merged$_i.r,\n            c = _merged$_i.c,\n            cell = _merged$_i.cell;\n        var border = cell.style.border;\n        cell.style.border = new _style.Border({});\n\n        for (var rownum = 0; rownum <= cell.vMerge; rownum++) {\n          var _loop2 = function _loop2(colnum) {\n            var tmpcell = _this.cell(r + rownum, c + colnum);\n\n            var arr = [];\n\n            if (rownum === 0) {\n              arr.push('top');\n            }\n\n            if (rownum === cell.vMerge) {\n              arr.push('bottom');\n            }\n\n            if (colnum === 0) {\n              arr.push('left');\n            }\n\n            if (colnum === cell.hMerge) {\n              arr.push('right');\n            }\n\n            if (arr.length) {\n              tmpcell.style.applyBorder = true;\n              arr.forEach(function (k) {\n                var ck = `${k}Color`;\n                tmpcell.style.border[k] = border[k];\n                tmpcell.style.border[ck] = border[ck];\n              });\n            }\n          };\n\n          for (var colnum = 0; colnum <= cell.hMerge; colnum++) {\n            _loop2(colnum);\n          }\n        }\n      };\n\n      for (var _i = 0, _merged = merged; _i < _merged.length; _i++) {\n        _loop();\n      }\n    }\n  }, {\n    key: \"makeXSheet\",\n    value: function makeXSheet(refTable, styles) {\n      var sheet = (0, _xmlWorksheet.makeXworksheet)();\n      var xSheet = new _xmlWorksheet.XsheetData();\n      var maxRow = 0;\n      var maxCell = 0;\n      var maxLevelCol;\n      var maxLevelRow;\n      this.handleMerged();\n\n      for (var i = 0; i < this.sheetViews.length; i++) {\n        var view = this.sheetViews[i];\n\n        if (view && view.pane) {\n          sheet.sheetViews.children[i].children.push(new _xmlWorksheet.Xpane({\n            xSplit: view.pane.xSplit,\n            ySplit: view.pane.ySplit,\n            topLeftCell: view.pane.topLeftCell,\n            activePane: view.pane.activePane,\n            state: view.pane.state\n          }));\n        }\n      }\n\n      if (this.selected) {\n        sheet.sheetViews.children[0].tabSelected = true;\n      }\n\n      if (this.sheetFormat.defaultRowHeight !== 0) {\n        sheet.sheetFormatPr.defaultRowHeight = this.sheetFormat.defaultRowHeight;\n      }\n\n      if (this.sheetFormat.defaultColWidth !== 0) {\n        sheet.sheetFormatPr.defaultColWidth = this.sheetFormat.defaultColWidth;\n      }\n\n      var fIdList = [];\n      sheet.cols = new _xmlWorksheet.Xcols();\n\n      for (var c = 0; c < this.cols.length; c++) {\n        var col = this.cols[c];\n        col.min = col.min || 1;\n        col.max = col.max || 1;\n        var xNumFmt = styles.newNumFmt(col.numFmt);\n        var fId = (0, _style.handleStyle)(col.style, xNumFmt.numFmtId, styles);\n        fIdList.push(fId);\n        var customWidth = 0;\n\n        if (col.width === 0) {\n          col.width = 9.5;\n        } else {\n          customWidth = 1;\n        }\n\n        sheet.cols.children.push(new _xmlWorksheet.Xcol({\n          min: col.min,\n          max: col.max,\n          hidden: col.hidden,\n          width: col.width,\n          customWidth: customWidth,\n          collapsed: col.collapsed,\n          outlineLevel: col.outlineLevel,\n          style: fId\n        }));\n\n        if (col.outlineLevel > maxLevelCol) {\n          maxLevelCol = col.outlineLevel;\n        }\n      }\n\n      for (var r = 0; r < this.rows.length; r++) {\n        var row = this.rows[r];\n        if (r > maxRow) maxRow = r;\n        var xRow = new _xmlWorksheet.Xrow({\n          r: r + 1\n        });\n\n        if (row.isCustom) {\n          xRow.customHeight = true;\n          xRow.ht = row.height;\n        }\n\n        xRow.outlineLevel = row.outlineLevel;\n\n        if (row.outlineLevel > maxLevelRow) {\n          maxLevelRow = row.outlineLevel;\n        }\n\n        for (var _c = 0; _c < row.cells.length; _c++) {\n          var _fId = fIdList[_c];\n          var cell = row.cells[_c];\n\n          var _xNumFmt = styles.newNumFmt(cell.numFmt);\n\n          var style = cell.style;\n\n          if (style !== null) {\n            _fId = (0, _style.handleStyle)(style, _xNumFmt.numFmtId, styles);\n          } else if (cell.numFmt && this.cols[_c].numFmt !== cell.numFmt) {\n            _fId = (0, _style.handleNumFmtId)(_xNumFmt.NumFmtId, styles);\n          }\n\n          if (_c > maxCell) maxCell = _c;\n          var xC = new _xmlWorksheet.Xc({\n            r: `${(0, _lib.num2col)(_c)}${r + 1}`\n          });\n\n          switch (cell.cellType) {\n            case 'TypeString':\n              if (cell.value) {\n                xC.v = refTable.addString(cell.value);\n              }\n\n              xC.t = 's';\n              xC.s = _fId;\n              break;\n\n            case 'TypeBool':\n              xC.v = cell.value;\n              xC.t = 'b';\n              xC.s = _fId;\n              break;\n\n            case 'TypeNumeric':\n              xC.v = cell.value;\n              xC.s = _fId;\n              break;\n\n            case 'TypeDate':\n              xC.v = cell.value;\n              xC.s = _fId;\n              break;\n\n            case 'TypeFormula':\n              xC.v = cell.value;\n              xC.f = new _xmlWorksheet.Xf({}, [cell.formula]);\n              xC.s = _fId;\n              break;\n\n            case 'TypeError':\n              xC.v = cell.value;\n              xC.f = new _xmlWorksheet.Xf({}, [cell.formula]);\n              xC.t = 'e';\n              xC.s = _fId;\n              break;\n\n            case 'TypeGeneral':\n              xC.v = cell.value;\n              xC.s = _fId;\n              break;\n          }\n\n          xRow.children.push(xC);\n\n          if (cell.hMerge > 0 || cell.vMerge > 0) {\n            // r == rownum, c == colnum\n            var start = `${(0, _lib.num2col)(_c)}${r + 1}`;\n            var endcol = _c + cell.hMerge;\n            var endrow = r + cell.vMerge + 1;\n            var end = `${(0, _lib.num2col)(endcol)}${endrow}`;\n            var mc = new _xmlWorksheet.XmergeCell({\n              ref: start + ':' + end\n            });\n\n            if (sheet.mergeCells === null) {\n              sheet.mergeCells = new _xmlWorksheet.XmergeCells();\n            }\n\n            sheet.mergeCells.children.push(mc);\n          }\n        }\n\n        xSheet.children.push(xRow);\n      } // Update sheet format with the freshly determined max levels\n\n\n      this.sheetFormat.outlineLevelCol = maxLevelCol;\n      this.sheetFormat.outlineLevelRow = maxLevelRow; // .. and then also apply this to the xml worksheet\n\n      sheet.sheetFormatPr.outlineLevelCol = this.sheetFormat.outlineLevelCol;\n      sheet.sheetFormatPr.outlineLevelRow = this.sheetFormat.outlineLevelRow;\n\n      if (sheet.mergeCells !== null) {\n        sheet.mergeCells.count = sheet.mergeCells.children.length;\n      }\n\n      sheet.sheetData = xSheet;\n      var dimension = new _xmlWorksheet.Xdimension({\n        ref: `A1:${(0, _lib.num2col)(maxCell)}${maxRow + 1}`\n      });\n\n      if (dimension.ref === 'A1:A1') {\n        dimension.ref = 'A1';\n      }\n\n      sheet.dimension = dimension;\n\n      if (this.afterMake) {\n        this.afterMake(sheet);\n      }\n\n      return sheet;\n    }\n  }]);\n  return Sheet;\n}();\n\nexports.Sheet = Sheet;"]},"metadata":{},"sourceType":"script"}