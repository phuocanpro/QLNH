{"ast":null,"code":"import { Keyframes, unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genCollapseMotion } from '../../style/motion';\nimport { genStyleHooks, mergeToken } from '../../theme/internal'; // ============================ Keyframes =============================\n\nconst treeNodeFX = new Keyframes('ant-tree-node-fx-do-not-use', {\n  '0%': {\n    opacity: 0\n  },\n  '100%': {\n    opacity: 1\n  }\n}); // ============================== Switch ==============================\n\nconst getSwitchStyle = (prefixCls, token) => ({\n  [`.${prefixCls}-switcher-icon`]: {\n    display: 'inline-block',\n    fontSize: 10,\n    verticalAlign: 'baseline',\n    svg: {\n      transition: `transform ${token.motionDurationSlow}`\n    }\n  }\n}); // =============================== Drop ===============================\n\n\nconst getDropIndicatorStyle = (prefixCls, token) => ({\n  [`.${prefixCls}-drop-indicator`]: {\n    position: 'absolute',\n    // it should displayed over the following node\n    zIndex: 1,\n    height: 2,\n    backgroundColor: token.colorPrimary,\n    borderRadius: 1,\n    pointerEvents: 'none',\n    '&:after': {\n      position: 'absolute',\n      top: -3,\n      insetInlineStart: -6,\n      width: 8,\n      height: 8,\n      backgroundColor: 'transparent',\n      border: `${unit(token.lineWidthBold)} solid ${token.colorPrimary}`,\n      borderRadius: '50%',\n      content: '\"\"'\n    }\n  }\n});\n\nexport const genBaseStyle = (prefixCls, token) => {\n  const {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding,\n    titleHeight,\n    nodeSelectedBg,\n    nodeHoverBg\n  } = token;\n  const treeCheckBoxMarginHorizontal = token.paddingXS;\n  return {\n    [treeCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      background: token.colorBgContainer,\n      borderRadius: token.borderRadius,\n      transition: `background-color ${token.motionDurationSlow}`,\n      [`&${treeCls}-rtl`]: {\n        // >>> Switcher\n        [`${treeCls}-switcher`]: {\n          '&_close': {\n            [`${treeCls}-switcher-icon`]: {\n              svg: {\n                transform: 'rotate(90deg)'\n              }\n            }\n          }\n        }\n      },\n      [`&-focused:not(:hover):not(${treeCls}-active-focused)`]: Object.assign({}, genFocusOutline(token)),\n      // =================== Virtual List ===================\n      [`${treeCls}-list-holder-inner`]: {\n        alignItems: 'flex-start'\n      },\n      [`&${treeCls}-block-node`]: {\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            flex: 'auto'\n          },\n          // >>> Drag\n          [`${treeNodeCls}.dragging`]: {\n            position: 'relative',\n            '&:after': {\n              position: 'absolute',\n              top: 0,\n              insetInlineEnd: 0,\n              bottom: treeNodePadding,\n              insetInlineStart: 0,\n              border: `1px solid ${token.colorPrimary}`,\n              opacity: 0,\n              animationName: treeNodeFX,\n              animationDuration: token.motionDurationSlow,\n              animationPlayState: 'running',\n              animationFillMode: 'forwards',\n              content: '\"\"',\n              pointerEvents: 'none'\n            }\n          }\n        }\n      },\n      // ===================== TreeNode =====================\n      [`${treeNodeCls}`]: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        padding: `0 0 ${unit(treeNodePadding)} 0`,\n        outline: 'none',\n        '&-rtl': {\n          direction: 'rtl'\n        },\n        // Disabled\n        '&-disabled': {\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            color: token.colorTextDisabled,\n            cursor: 'not-allowed',\n            '&:hover': {\n              background: 'transparent'\n            }\n          }\n        },\n        [`&-active ${treeCls}-node-content-wrapper`]: Object.assign({}, genFocusOutline(token)),\n        [`&:not(${treeNodeCls}-disabled).filter-node ${treeCls}-title`]: {\n          color: 'inherit',\n          fontWeight: 500\n        },\n        '&-draggable': {\n          [`${treeCls}-draggable-icon`]: {\n            // https://github.com/ant-design/ant-design/issues/41915\n            flexShrink: 0,\n            width: titleHeight,\n            lineHeight: `${unit(titleHeight)}`,\n            textAlign: 'center',\n            visibility: 'visible',\n            opacity: 0.2,\n            transition: `opacity ${token.motionDurationSlow}`,\n            [`${treeNodeCls}:hover &`]: {\n              opacity: 0.45\n            }\n          },\n          [`&${treeNodeCls}-disabled`]: {\n            [`${treeCls}-draggable-icon`]: {\n              visibility: 'hidden'\n            }\n          }\n        }\n      },\n      // >>> Indent\n      [`${treeCls}-indent`]: {\n        alignSelf: 'stretch',\n        whiteSpace: 'nowrap',\n        userSelect: 'none',\n        '&-unit': {\n          display: 'inline-block',\n          width: titleHeight\n        }\n      },\n      // >>> Drag Handler\n      [`${treeCls}-draggable-icon`]: {\n        visibility: 'hidden'\n      },\n      // >>> Switcher\n      [`${treeCls}-switcher`]: Object.assign(Object.assign({}, getSwitchStyle(prefixCls, token)), {\n        position: 'relative',\n        flex: 'none',\n        alignSelf: 'stretch',\n        width: titleHeight,\n        margin: 0,\n        lineHeight: `${unit(titleHeight)}`,\n        textAlign: 'center',\n        cursor: 'pointer',\n        userSelect: 'none',\n        '&-noop': {\n          cursor: 'default'\n        },\n        '&_close': {\n          [`${treeCls}-switcher-icon`]: {\n            svg: {\n              transform: 'rotate(-90deg)'\n            }\n          }\n        },\n        '&-loading-icon': {\n          color: token.colorPrimary\n        },\n        '&-leaf-line': {\n          position: 'relative',\n          zIndex: 1,\n          display: 'inline-block',\n          width: '100%',\n          height: '100%',\n          // https://github.com/ant-design/ant-design/issues/31884\n          '&:before': {\n            position: 'absolute',\n            top: 0,\n            insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n            bottom: token.calc(treeNodePadding).mul(-1).equal(),\n            marginInlineStart: -1,\n            borderInlineEnd: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          },\n          '&:after': {\n            position: 'absolute',\n            width: token.calc(token.calc(titleHeight).div(2).equal()).mul(0.8).equal(),\n            height: token.calc(titleHeight).div(2).equal(),\n            borderBottom: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          }\n        }\n      }),\n      // >>> Checkbox\n      [`${treeCls}-checkbox`]: {\n        top: 'initial',\n        marginInlineEnd: treeCheckBoxMarginHorizontal,\n        alignSelf: 'flex-start',\n        marginTop: token.marginXXS\n      },\n      // >>> Title\n      // add `${treeCls}-checkbox + span` to cover checkbox `${checkboxCls} + span`\n      [`${treeCls}-node-content-wrapper, ${treeCls}-checkbox + span`]: {\n        position: 'relative',\n        zIndex: 'auto',\n        minHeight: titleHeight,\n        margin: 0,\n        padding: `0 ${unit(token.calc(token.paddingXS).div(2).equal())}`,\n        color: 'inherit',\n        lineHeight: `${unit(titleHeight)}`,\n        background: 'transparent',\n        borderRadius: token.borderRadius,\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationMid}, border 0s, line-height 0s, box-shadow 0s`,\n        '&:hover': {\n          backgroundColor: nodeHoverBg\n        },\n        [`&${treeCls}-node-selected`]: {\n          backgroundColor: nodeSelectedBg\n        },\n        // Icon\n        [`${treeCls}-iconEle`]: {\n          display: 'inline-block',\n          width: titleHeight,\n          height: titleHeight,\n          lineHeight: `${unit(titleHeight)}`,\n          textAlign: 'center',\n          verticalAlign: 'top',\n          '&:empty': {\n            display: 'none'\n          }\n        }\n      },\n      // https://github.com/ant-design/ant-design/issues/28217\n      [`${treeCls}-unselectable ${treeCls}-node-content-wrapper:hover`]: {\n        backgroundColor: 'transparent'\n      },\n      // ==================== Draggable =====================\n      [`${treeCls}-node-content-wrapper`]: Object.assign({\n        lineHeight: `${unit(titleHeight)}`,\n        userSelect: 'none'\n      }, getDropIndicatorStyle(prefixCls, token)),\n      [`${treeNodeCls}.drop-container`]: {\n        '> [draggable]': {\n          boxShadow: `0 0 0 2px ${token.colorPrimary}`\n        }\n      },\n      // ==================== Show Line =====================\n      '&-show-line': {\n        // ================ Indent lines ================\n        [`${treeCls}-indent`]: {\n          '&-unit': {\n            position: 'relative',\n            height: '100%',\n            '&:before': {\n              position: 'absolute',\n              top: 0,\n              insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n              bottom: token.calc(treeNodePadding).mul(-1).equal(),\n              borderInlineEnd: `1px solid ${token.colorBorder}`,\n              content: '\"\"'\n            },\n            '&-end': {\n              '&:before': {\n                display: 'none'\n              }\n            }\n          }\n        },\n        // ============== Cover Background ==============\n        [`${treeCls}-switcher`]: {\n          background: 'transparent',\n          '&-line-icon': {\n            // https://github.com/ant-design/ant-design/issues/32813\n            verticalAlign: '-0.15em'\n          }\n        }\n      },\n      [`${treeNodeCls}-leaf-last`]: {\n        [`${treeCls}-switcher`]: {\n          '&-leaf-line': {\n            '&:before': {\n              top: 'auto !important',\n              bottom: 'auto !important',\n              height: `${unit(token.calc(titleHeight).div(2).equal())} !important`\n            }\n          }\n        }\n      }\n    })\n  };\n}; // ============================ Directory =============================\n\nexport const genDirectoryStyle = token => {\n  const {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding,\n    directoryNodeSelectedBg,\n    directoryNodeSelectedColor\n  } = token;\n  return {\n    [`${treeCls}${treeCls}-directory`]: {\n      // ================== TreeNode ==================\n      [treeNodeCls]: {\n        position: 'relative',\n        // Hover color\n        '&:before': {\n          position: 'absolute',\n          top: 0,\n          insetInlineEnd: 0,\n          bottom: treeNodePadding,\n          insetInlineStart: 0,\n          transition: `background-color ${token.motionDurationMid}`,\n          content: '\"\"',\n          pointerEvents: 'none'\n        },\n        '&:hover': {\n          '&:before': {\n            background: token.controlItemBgHover\n          }\n        },\n        // Elements\n        '> *': {\n          zIndex: 1\n        },\n        // >>> Switcher\n        [`${treeCls}-switcher`]: {\n          transition: `color ${token.motionDurationMid}`\n        },\n        // >>> Title\n        [`${treeCls}-node-content-wrapper`]: {\n          borderRadius: 0,\n          userSelect: 'none',\n          '&:hover': {\n            background: 'transparent'\n          },\n          [`&${treeCls}-node-selected`]: {\n            color: directoryNodeSelectedColor,\n            background: 'transparent'\n          }\n        },\n        // ============= Selected =============\n        '&-selected': {\n          [`\n            &:hover::before,\n            &::before\n          `]: {\n            background: directoryNodeSelectedBg\n          },\n          // >>> Switcher\n          [`${treeCls}-switcher`]: {\n            color: directoryNodeSelectedColor\n          },\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            color: directoryNodeSelectedColor,\n            background: 'transparent'\n          }\n        }\n      }\n    }\n  };\n}; // ============================== Merged ==============================\n\nexport const genTreeStyle = (prefixCls, token) => {\n  const treeCls = `.${prefixCls}`;\n  const treeNodeCls = `${treeCls}-treenode`;\n  const treeNodePadding = token.calc(token.paddingXS).div(2).equal();\n  const treeToken = mergeToken(token, {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding\n  });\n  return [// Basic\n  genBaseStyle(prefixCls, treeToken), // Directory\n  genDirectoryStyle(treeToken)];\n};\nexport const initComponentToken = token => {\n  const {\n    controlHeightSM\n  } = token;\n  return {\n    titleHeight: controlHeightSM,\n    nodeHoverBg: token.controlItemBgHover,\n    nodeSelectedBg: token.controlItemBgActive\n  };\n};\nexport const prepareComponentToken = token => {\n  const {\n    colorTextLightSolid,\n    colorPrimary\n  } = token;\n  return Object.assign(Object.assign({}, initComponentToken(token)), {\n    directoryNodeSelectedColor: colorTextLightSolid,\n    directoryNodeSelectedBg: colorPrimary\n  });\n};\nexport default genStyleHooks('Tree', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [{\n    [token.componentCls]: getCheckboxStyle(`${prefixCls}-checkbox`, token)\n  }, genTreeStyle(prefixCls, token), genCollapseMotion(token)];\n}, prepareComponentToken);","map":{"version":3,"sources":["D:/CNWEB/QLNH/client_app/node_modules/antd/es/tree/style/index.js"],"names":["Keyframes","unit","getStyle","getCheckboxStyle","genFocusOutline","resetComponent","genCollapseMotion","genStyleHooks","mergeToken","treeNodeFX","opacity","getSwitchStyle","prefixCls","token","display","fontSize","verticalAlign","svg","transition","motionDurationSlow","getDropIndicatorStyle","position","zIndex","height","backgroundColor","colorPrimary","borderRadius","pointerEvents","top","insetInlineStart","width","border","lineWidthBold","content","genBaseStyle","treeCls","treeNodeCls","treeNodePadding","titleHeight","nodeSelectedBg","nodeHoverBg","treeCheckBoxMarginHorizontal","paddingXS","Object","assign","background","colorBgContainer","transform","alignItems","flex","insetInlineEnd","bottom","animationName","animationDuration","animationPlayState","animationFillMode","padding","outline","direction","color","colorTextDisabled","cursor","fontWeight","flexShrink","lineHeight","textAlign","visibility","alignSelf","whiteSpace","userSelect","margin","calc","div","equal","mul","marginInlineStart","borderInlineEnd","colorBorder","borderBottom","marginInlineEnd","marginTop","marginXXS","minHeight","motionDurationMid","boxShadow","genDirectoryStyle","directoryNodeSelectedBg","directoryNodeSelectedColor","controlItemBgHover","genTreeStyle","treeToken","initComponentToken","controlHeightSM","controlItemBgActive","prepareComponentToken","colorTextLightSolid","_ref","componentCls"],"mappings":"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","sourcesContent":["import { Keyframes, unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genCollapseMotion } from '../../style/motion';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n// ============================ Keyframes =============================\nconst treeNodeFX = new Keyframes('ant-tree-node-fx-do-not-use', {\n  '0%': {\n    opacity: 0\n  },\n  '100%': {\n    opacity: 1\n  }\n});\n// ============================== Switch ==============================\nconst getSwitchStyle = (prefixCls, token) => ({\n  [`.${prefixCls}-switcher-icon`]: {\n    display: 'inline-block',\n    fontSize: 10,\n    verticalAlign: 'baseline',\n    svg: {\n      transition: `transform ${token.motionDurationSlow}`\n    }\n  }\n});\n// =============================== Drop ===============================\nconst getDropIndicatorStyle = (prefixCls, token) => ({\n  [`.${prefixCls}-drop-indicator`]: {\n    position: 'absolute',\n    // it should displayed over the following node\n    zIndex: 1,\n    height: 2,\n    backgroundColor: token.colorPrimary,\n    borderRadius: 1,\n    pointerEvents: 'none',\n    '&:after': {\n      position: 'absolute',\n      top: -3,\n      insetInlineStart: -6,\n      width: 8,\n      height: 8,\n      backgroundColor: 'transparent',\n      border: `${unit(token.lineWidthBold)} solid ${token.colorPrimary}`,\n      borderRadius: '50%',\n      content: '\"\"'\n    }\n  }\n});\nexport const genBaseStyle = (prefixCls, token) => {\n  const {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding,\n    titleHeight,\n    nodeSelectedBg,\n    nodeHoverBg\n  } = token;\n  const treeCheckBoxMarginHorizontal = token.paddingXS;\n  return {\n    [treeCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      background: token.colorBgContainer,\n      borderRadius: token.borderRadius,\n      transition: `background-color ${token.motionDurationSlow}`,\n      [`&${treeCls}-rtl`]: {\n        // >>> Switcher\n        [`${treeCls}-switcher`]: {\n          '&_close': {\n            [`${treeCls}-switcher-icon`]: {\n              svg: {\n                transform: 'rotate(90deg)'\n              }\n            }\n          }\n        }\n      },\n      [`&-focused:not(:hover):not(${treeCls}-active-focused)`]: Object.assign({}, genFocusOutline(token)),\n      // =================== Virtual List ===================\n      [`${treeCls}-list-holder-inner`]: {\n        alignItems: 'flex-start'\n      },\n      [`&${treeCls}-block-node`]: {\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            flex: 'auto'\n          },\n          // >>> Drag\n          [`${treeNodeCls}.dragging`]: {\n            position: 'relative',\n            '&:after': {\n              position: 'absolute',\n              top: 0,\n              insetInlineEnd: 0,\n              bottom: treeNodePadding,\n              insetInlineStart: 0,\n              border: `1px solid ${token.colorPrimary}`,\n              opacity: 0,\n              animationName: treeNodeFX,\n              animationDuration: token.motionDurationSlow,\n              animationPlayState: 'running',\n              animationFillMode: 'forwards',\n              content: '\"\"',\n              pointerEvents: 'none'\n            }\n          }\n        }\n      },\n      // ===================== TreeNode =====================\n      [`${treeNodeCls}`]: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        padding: `0 0 ${unit(treeNodePadding)} 0`,\n        outline: 'none',\n        '&-rtl': {\n          direction: 'rtl'\n        },\n        // Disabled\n        '&-disabled': {\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            color: token.colorTextDisabled,\n            cursor: 'not-allowed',\n            '&:hover': {\n              background: 'transparent'\n            }\n          }\n        },\n        [`&-active ${treeCls}-node-content-wrapper`]: Object.assign({}, genFocusOutline(token)),\n        [`&:not(${treeNodeCls}-disabled).filter-node ${treeCls}-title`]: {\n          color: 'inherit',\n          fontWeight: 500\n        },\n        '&-draggable': {\n          [`${treeCls}-draggable-icon`]: {\n            // https://github.com/ant-design/ant-design/issues/41915\n            flexShrink: 0,\n            width: titleHeight,\n            lineHeight: `${unit(titleHeight)}`,\n            textAlign: 'center',\n            visibility: 'visible',\n            opacity: 0.2,\n            transition: `opacity ${token.motionDurationSlow}`,\n            [`${treeNodeCls}:hover &`]: {\n              opacity: 0.45\n            }\n          },\n          [`&${treeNodeCls}-disabled`]: {\n            [`${treeCls}-draggable-icon`]: {\n              visibility: 'hidden'\n            }\n          }\n        }\n      },\n      // >>> Indent\n      [`${treeCls}-indent`]: {\n        alignSelf: 'stretch',\n        whiteSpace: 'nowrap',\n        userSelect: 'none',\n        '&-unit': {\n          display: 'inline-block',\n          width: titleHeight\n        }\n      },\n      // >>> Drag Handler\n      [`${treeCls}-draggable-icon`]: {\n        visibility: 'hidden'\n      },\n      // >>> Switcher\n      [`${treeCls}-switcher`]: Object.assign(Object.assign({}, getSwitchStyle(prefixCls, token)), {\n        position: 'relative',\n        flex: 'none',\n        alignSelf: 'stretch',\n        width: titleHeight,\n        margin: 0,\n        lineHeight: `${unit(titleHeight)}`,\n        textAlign: 'center',\n        cursor: 'pointer',\n        userSelect: 'none',\n        '&-noop': {\n          cursor: 'default'\n        },\n        '&_close': {\n          [`${treeCls}-switcher-icon`]: {\n            svg: {\n              transform: 'rotate(-90deg)'\n            }\n          }\n        },\n        '&-loading-icon': {\n          color: token.colorPrimary\n        },\n        '&-leaf-line': {\n          position: 'relative',\n          zIndex: 1,\n          display: 'inline-block',\n          width: '100%',\n          height: '100%',\n          // https://github.com/ant-design/ant-design/issues/31884\n          '&:before': {\n            position: 'absolute',\n            top: 0,\n            insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n            bottom: token.calc(treeNodePadding).mul(-1).equal(),\n            marginInlineStart: -1,\n            borderInlineEnd: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          },\n          '&:after': {\n            position: 'absolute',\n            width: token.calc(token.calc(titleHeight).div(2).equal()).mul(0.8).equal(),\n            height: token.calc(titleHeight).div(2).equal(),\n            borderBottom: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          }\n        }\n      }),\n      // >>> Checkbox\n      [`${treeCls}-checkbox`]: {\n        top: 'initial',\n        marginInlineEnd: treeCheckBoxMarginHorizontal,\n        alignSelf: 'flex-start',\n        marginTop: token.marginXXS\n      },\n      // >>> Title\n      // add `${treeCls}-checkbox + span` to cover checkbox `${checkboxCls} + span`\n      [`${treeCls}-node-content-wrapper, ${treeCls}-checkbox + span`]: {\n        position: 'relative',\n        zIndex: 'auto',\n        minHeight: titleHeight,\n        margin: 0,\n        padding: `0 ${unit(token.calc(token.paddingXS).div(2).equal())}`,\n        color: 'inherit',\n        lineHeight: `${unit(titleHeight)}`,\n        background: 'transparent',\n        borderRadius: token.borderRadius,\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationMid}, border 0s, line-height 0s, box-shadow 0s`,\n        '&:hover': {\n          backgroundColor: nodeHoverBg\n        },\n        [`&${treeCls}-node-selected`]: {\n          backgroundColor: nodeSelectedBg\n        },\n        // Icon\n        [`${treeCls}-iconEle`]: {\n          display: 'inline-block',\n          width: titleHeight,\n          height: titleHeight,\n          lineHeight: `${unit(titleHeight)}`,\n          textAlign: 'center',\n          verticalAlign: 'top',\n          '&:empty': {\n            display: 'none'\n          }\n        }\n      },\n      // https://github.com/ant-design/ant-design/issues/28217\n      [`${treeCls}-unselectable ${treeCls}-node-content-wrapper:hover`]: {\n        backgroundColor: 'transparent'\n      },\n      // ==================== Draggable =====================\n      [`${treeCls}-node-content-wrapper`]: Object.assign({\n        lineHeight: `${unit(titleHeight)}`,\n        userSelect: 'none'\n      }, getDropIndicatorStyle(prefixCls, token)),\n      [`${treeNodeCls}.drop-container`]: {\n        '> [draggable]': {\n          boxShadow: `0 0 0 2px ${token.colorPrimary}`\n        }\n      },\n      // ==================== Show Line =====================\n      '&-show-line': {\n        // ================ Indent lines ================\n        [`${treeCls}-indent`]: {\n          '&-unit': {\n            position: 'relative',\n            height: '100%',\n            '&:before': {\n              position: 'absolute',\n              top: 0,\n              insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n              bottom: token.calc(treeNodePadding).mul(-1).equal(),\n              borderInlineEnd: `1px solid ${token.colorBorder}`,\n              content: '\"\"'\n            },\n            '&-end': {\n              '&:before': {\n                display: 'none'\n              }\n            }\n          }\n        },\n        // ============== Cover Background ==============\n        [`${treeCls}-switcher`]: {\n          background: 'transparent',\n          '&-line-icon': {\n            // https://github.com/ant-design/ant-design/issues/32813\n            verticalAlign: '-0.15em'\n          }\n        }\n      },\n      [`${treeNodeCls}-leaf-last`]: {\n        [`${treeCls}-switcher`]: {\n          '&-leaf-line': {\n            '&:before': {\n              top: 'auto !important',\n              bottom: 'auto !important',\n              height: `${unit(token.calc(titleHeight).div(2).equal())} !important`\n            }\n          }\n        }\n      }\n    })\n  };\n};\n// ============================ Directory =============================\nexport const genDirectoryStyle = token => {\n  const {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding,\n    directoryNodeSelectedBg,\n    directoryNodeSelectedColor\n  } = token;\n  return {\n    [`${treeCls}${treeCls}-directory`]: {\n      // ================== TreeNode ==================\n      [treeNodeCls]: {\n        position: 'relative',\n        // Hover color\n        '&:before': {\n          position: 'absolute',\n          top: 0,\n          insetInlineEnd: 0,\n          bottom: treeNodePadding,\n          insetInlineStart: 0,\n          transition: `background-color ${token.motionDurationMid}`,\n          content: '\"\"',\n          pointerEvents: 'none'\n        },\n        '&:hover': {\n          '&:before': {\n            background: token.controlItemBgHover\n          }\n        },\n        // Elements\n        '> *': {\n          zIndex: 1\n        },\n        // >>> Switcher\n        [`${treeCls}-switcher`]: {\n          transition: `color ${token.motionDurationMid}`\n        },\n        // >>> Title\n        [`${treeCls}-node-content-wrapper`]: {\n          borderRadius: 0,\n          userSelect: 'none',\n          '&:hover': {\n            background: 'transparent'\n          },\n          [`&${treeCls}-node-selected`]: {\n            color: directoryNodeSelectedColor,\n            background: 'transparent'\n          }\n        },\n        // ============= Selected =============\n        '&-selected': {\n          [`\n            &:hover::before,\n            &::before\n          `]: {\n            background: directoryNodeSelectedBg\n          },\n          // >>> Switcher\n          [`${treeCls}-switcher`]: {\n            color: directoryNodeSelectedColor\n          },\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            color: directoryNodeSelectedColor,\n            background: 'transparent'\n          }\n        }\n      }\n    }\n  };\n};\n// ============================== Merged ==============================\nexport const genTreeStyle = (prefixCls, token) => {\n  const treeCls = `.${prefixCls}`;\n  const treeNodeCls = `${treeCls}-treenode`;\n  const treeNodePadding = token.calc(token.paddingXS).div(2).equal();\n  const treeToken = mergeToken(token, {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding\n  });\n  return [\n  // Basic\n  genBaseStyle(prefixCls, treeToken),\n  // Directory\n  genDirectoryStyle(treeToken)];\n};\nexport const initComponentToken = token => {\n  const {\n    controlHeightSM\n  } = token;\n  return {\n    titleHeight: controlHeightSM,\n    nodeHoverBg: token.controlItemBgHover,\n    nodeSelectedBg: token.controlItemBgActive\n  };\n};\nexport const prepareComponentToken = token => {\n  const {\n    colorTextLightSolid,\n    colorPrimary\n  } = token;\n  return Object.assign(Object.assign({}, initComponentToken(token)), {\n    directoryNodeSelectedColor: colorTextLightSolid,\n    directoryNodeSelectedBg: colorPrimary\n  });\n};\nexport default genStyleHooks('Tree', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [{\n    [token.componentCls]: getCheckboxStyle(`${prefixCls}-checkbox`, token)\n  }, genTreeStyle(prefixCls, token), genCollapseMotion(token)];\n}, prepareComponentToken);"]},"metadata":{},"sourceType":"module"}